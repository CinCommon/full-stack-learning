模块化: 
1. sea, require  --民间
    CMD AMD
    模块.js  define  require/exports/module
    前台.html: use
2. node.js:
    node_modules: 目录: 存放模块代码
    require/exports/module
3. ES6 --官方
    export/import
---------------------------------------------------------
babel-ES6
webpack-一站式
---------------------------------------------------------
数据交互
1. http协议
2. form
3. ajax-官方, 不能跨域 单向
4. jsonp-民间, 可以跨域
5. websocket-双工->双向
---------------------------------------------------------
http协议: 
1. 无状态的(金鱼)->第一次请求和第一百次请求效果一样,不会记住你是谁
2. 连接过程: 连接, 接受, 发送请求
3. 消息分两块: 
    header: 以行为单位, 
        GET /a.html?xxx HTTP/1.1
        Host: ...
        Connection: ...
        Pragma: ...

    body
---------------------------------------------------------
http缓存: 
1. 请求后面加随机数
2. Cache-Control, Date, Expires
---------------------------------------------------------
http/https:
https: 非对称加密, 在http之上加密, 别人看不到通信过程, 需要证书 
---------------------------------------------------------
http1.0: 短连接
http1.1: 主流, 长连接--keep alive
http: 2.0: http是无状态的, 而2.0试图为网络请求加上状态.
---------------------------------------------------------
form: 重要!! http协议规定, 浏览器发给服务器的只有一种格式的数据, 就是form数据
通信方式: ajax, jsonp 都是对form的模拟, 封装
form: {
    action: 接收到某个地址
    method: GET, POST, PUT, DELETE, HEAD... (method是可以自定义的,但是服务器也要配置相应的method)
        GET: 把数据放在url中传输, 数据量很小, 有缓存, <=32K
        POST: 把数据放在body中, 数据量大, 不会缓存, <=1G
        GET, POST安全性上来说没有本质区别
        几种请求方式更多的是语义的不同
        GET--主要是获取数据, 不需要很大的数据量, 而且需要缓存
        POST--主要是发送数据, 可能会发送大量数据
        PUT: 和POST没有太大区别, 但是在RESTful中有区别, 以后再讲
        DELETE: 语义是删除, 既然是删除所以他和
        HEAD: 为了告诉服务器, 让服务器只发送头就可以了(不需要内容)--运维中的心跳机制, 检测服务器是不是还活着, 没事儿戳他一下让他响应
    name: 
    enctype: 
        "application/x-www-form-urlencoded":这种方式是默认值, 只适合发送小数据, 数据格式: 键=值&键=值&键=值&键=值
        "multipart/form-data": 分块, 适合文件上传等功能, 适合大数据, >=1G
        "text/plain"
}
---------------------------------------------------------
ajax, jsonp 原理
ajax: XMLHttpRequest: XHR请求: 
    XMLHttpRequest对IE6不兼容, 不过IE6基本已经凉了
    1. ajax好: 用户体验好, 性能高, 
        后台同时被众多请求操作, 要减少后台服务器的压力

WebSocket
